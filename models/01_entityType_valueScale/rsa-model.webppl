// helper function for visualization
var marginalize = function(dist, key){
  return Infer({model: function(){ sample(dist)[key] }})
};

// pre-defined states and utterances
var lb = 0, ub = 1, diff = 0.05;
var bins = _.range(lb, ub + diff, diff); 
var phi_bins = _.range(lb+0.05, ub + diff, diff); 
var utterances = [
  "fast", "not_fast", "slow", "not_slow"
];

// literal listener
var meaning = function(words, state, thresholds){
  return words == "fast" ? state > thresholds.fast :
  words == "not_fast" ? !(state > thresholds.fast) :
  words == "slow" ? state < thresholds.slow : 
  words == "not_slow" ? !(state < thresholds.slow) : 
  error("words not in utterances")
};
var listener0 = cache(function(utterance, thresholds) {
  Infer({model: function(){
    var state = uniformDraw(bins);
    var m = meaning(utterance, state, thresholds);
    condition(m);
    return state;
  }})
}, 10000);

// pragmatic speaker
var alpha = 1;
var cost_yes = 1; 
var cost_not = 2; 
var isNegation = function(utt){
  return (utt.split("_")[0] == "not")
};
var cost_positive = 0;
var cost_negative = 0.5; 
var isNegative = function(utt){
  return (utt.split("_").slice(-1)[0] == "slow" )
}
var cost = function(u) {
  var negation_cost = isNegation(u) ? cost_not : cost_yes;
  var polarity_cost = isNegative(u) ? cost_negative : cost_positive;
  return negation_cost + polarity_cost
}
var valueFunction = function(lambda){
    return function(s) {
      return lambda * s
    }
  };
var speaker1 = cache(function(state, thresholds, phi, lambda) {
  Infer({model: function(){
    var utterance = uniformDraw(utterances)
    var L0_posterior = listener0(utterance, thresholds);
    var utility = {
        epistemic: L0_posterior.score(state),
        social: expectation(L0_posterior, valueFunction(lambda))
      }
    var speakerUtility = phi * utility.epistemic
      + (1 - phi) * utility.social 
      - cost(utterance);
    factor(alpha*speakerUtility);
    return utterance;
  }})
}, 10000);

// pragmatic listener
var listener1 = cache(function(utterance, lambda) {
  Infer({model: function(){
    
    (utterance.split("_").slice(-1)[0])
    var thresholds = {
      fast: uniformDraw(_.range(lb, ub, diff)), // threshold for fast: 0 <= range < 1
      slow: uniformDraw(_.range(lb+diff, ub+diff, diff)) // threshold for slow: 0 < range <= 1
    }
    condition(thresholds.fast >= thresholds.slow)
    
    // var phi = 1 // only informativeness matters
    // var phi = 0.5 // both matter
    // var phi = 0.001 // only face matters
    // var lambda = (valuescale===1) ? 5 : -5
    var phi = uniformDraw(_.range(0.1,0.9,0.05))
    var state = uniformDraw(bins);
    var S1_posterior = speaker1(state, thresholds, phi, lambda)
    observe(S1_posterior, utterance)
    return { state, phi }
  }})
}, 10000);

// explore model predictions 
display("PRAGMATIC LISTENER when beta=5")
map(function(u){
  var L1_posterior = listener1(u, 5);
  display("phi (imformative utility) = " + expectation(marginalize(L1_posterior, "phi")))
  display("expected state of " + u + " = " + expectation(marginalize(L1_posterior, "state")))
  viz(marginalize(L1_posterior, "state"))  
}, utterances)

display("PRAGMATIC LISTENER when beta=-1")
map(function(u){
  var L1_posterior = listener1(u, -1);
  display("phi (imformative utility) = " + expectation(marginalize(L1_posterior, "phi")))
  display("expected state of " + u + " = " + expectation(marginalize(L1_posterior, "state")))
  viz(marginalize(L1_posterior, "state"))  
}, utterances)